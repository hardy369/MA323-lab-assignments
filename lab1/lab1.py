import numpy as np
import matplotlib.pyplot as plt

# Problem 1
#defined  a function that genrates a sequence based on the linear congruency generator.
def randomnumgenerator(a, b, m, x0, n):
    xi = x0
    sequence = [xi]
    for _ in range(n):
        xi = (a * xi + b) % m
        sequence.append(xi)
    return sequence

# Generate sequences for a=6, b=0, m=11, and x0 ranging from 0 to 10
sequences_a6 = []
for x0 in range(11):
    sequence = randomnumgenerator(6, 0, 11, x0, 10)
    sequences_a6.append(sequence)

# Generate sequences for a=3, b=0, m=11, and x0 ranging from 0 to 10
sequences_a3 = []
for x0 in range(11):
    sequence = randomnumgenerator(3, 0, 11, x0, 10)
    sequences_a3.append(sequence)

# Print sequences and observe repetition
for i, sequence in enumerate(sequences_a6):
    print(f"a=6, x0={i}: {sequence}")
    print(f"Distinct values before repetition: {len(set(sequence))}")
    print()

for i, sequence in enumerate(sequences_a3):
    print(f"a=3, x0={i}: {sequence}")
    print(f"Distinct values before repetition: {len(set(sequence))}")
    print()

# Problem 2
def linear_congruence(a, b, m, x0, n):
    xi = x0
    sequence = []
    for _ in range(n):
        xi = (a * xi + b) % m
        sequence.append(xi / m)
    return sequence

m = 244944
a_values = [1597, 51749]
n = 10000

x0_values = [12345, 67890, 11111, 22222, 33333]

for a in a_values:
    print(f"a = {a}:")
    for x0 in x0_values:
        sequence = linear_congruence(a, 0, m, x0, n)
        bins = np.arange(0, 1.05, 0.05)
        hist, _ = np.histogram(sequence, bins=bins)
        print(f"x0 = {x0}:")
        print(hist)
        plt.bar(bins[:-1], hist, width=0.038, align='edge')
        plt.xlabel("Range")
        plt.ylabel("Frequency")
        plt.title(f"Frequency Graph for x0 = {x0}, a = {a}")
        plt.xticks(bins[:-1])
        plt.show()
# Problem 3
a = 1229
b = 1
m = 2048
x0 = 12345
n = 10000

sequence = linear_congruence(a, b, m, x0, n)

plt.scatter(sequence[:-1], sequence[1:])
plt.show()
# Problem 4
#a
# Parameters for the Linear Congruence Generator
a = 1597
b = 1
m = 244944
x0 = 123
n = 17

# Generate the first 17 numbers
u = linear_congruence(a, b, m, x0, n)

print("The first 17 numbers generated by the Linear Congruence Generator are:")
print(u)

# Recursion
def recursion(u, n):
    ui = u
    for _ in range(n - len(u)):
        ui.append((ui[-17] - ui[-5]))
        if ui[-1] < 0:
            ui[-1] += 1
    return ui
#b
# Generate the values of U18, U19, ..., UN
N = [1000, 10000, 100000]
for n in N:
    ui = recursion(u, n)
 #c   
    # Plot histogram
    plt.hist(ui, bins=50)
    plt.title(f"Histogram of Ui for N={n}")
    plt.show()
  #d  
    # Plot (Ui, Ui+1)
    plt.scatter(ui[:-1], ui[1:])
    plt.title(f"Plot of (Ui, Ui+1) for N={n}")
    plt.show()
